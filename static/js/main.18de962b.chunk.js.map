{"version":3,"sources":["DimentionsContext.js","components/InputSlider.js","components/InformationField.js","components/Cube.js","App.js","reportWebVitals.js","index.js"],"names":["DimentionsContext","createContext","DimentionsProvider","props","useState","height","width","depth","color","dimentions","setDimentions","Provider","value","children","InputSlider","title","useContext","setValue","Typography","id","gutterBottom","Grid","container","spacing","alignItems","item","xs","Slider","onChange","event","newValue","aria-labelledby","Input","margin","Number","target","onBlur","inputProps","step","min","max","type","inputTitles","colors","InformationField","v","error","setError","textRef","useRef","volume","price","Math","round","handleColorChange","e","newColor","style","backgroundColor","className","map","element","variant","align","onClick","TextField","inputRef","label","placeholder","helperText","Button","hexValue","current","test","fullWidth","Cube","attach","args","transparent","App","orthographic","camera","zoom","position","angle","intensity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.18de962b.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\r\n\r\nexport const DimentionsContext = createContext()\r\n\r\nexport const DimentionsProvider = (props) => {\r\n  const [dimentions, setDimentions] = useState({\r\n    height: 30,\r\n    width: 30,\r\n    depth: 30,\r\n    color: \"#f134f3\"\r\n  })\r\n\r\n  return (\r\n    <DimentionsContext.Provider value={[dimentions, setDimentions]}>\r\n      {props.children}\r\n    </DimentionsContext.Provider>\r\n  )\r\n}","import React, {useState, useContext} from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport {DimentionsContext} from '../DimentionsContext';\r\n\r\n\r\n\r\nexport default function InputSlider({title}) {\r\n  const [dimentions, setDimentions] = useContext(DimentionsContext)\r\n  const [value, setValue] = useState(dimentions[title]);\r\n\r\n\r\n  const handleSliderChange = (event, newValue) => {\r\n      setValue(newValue);\r\n      setDimentions({...dimentions, [title] : newValue})\r\n  };\r\n\r\n  const handleInputChange = (event) => {\r\n    if (Number(event.target.value)>=0 && Number(event.target.value)<=100) {\r\n      setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n      setDimentions({...dimentions, [title] : Number(event.target.value)}) \r\n    }\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    if (value < 0) {\r\n      setValue(0);\r\n    } else if (value > 100) {\r\n      setValue(100);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div >\r\n      <Typography id=\"input-slider\" gutterBottom>\r\n        {title}\r\n      </Typography>\r\n      <Grid container spacing={2} alignItems=\"center\">\r\n        <Grid item xs>\r\n          <Slider\r\n            value={typeof value === 'number' ? value : 0}\r\n            onChange={handleSliderChange}\r\n            aria-labelledby=\"input-slider\"\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <Input\r\n            value={value}\r\n            margin=\"dense\"\r\n            onChange={handleInputChange}\r\n            onBlur={handleBlur}\r\n            inputProps={{\r\n              step: 1,\r\n              min: 0,\r\n              max: 100,\r\n              type: 'number',\r\n              'aria-labelledby': 'input-slider',\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n","import React, {useContext, useRef, useState} from 'react'\r\nimport InputSlider from './InputSlider';\r\nimport {DimentionsContext} from '../DimentionsContext'\r\nimport {Button, Typography, TextField} from '@material-ui/core'\r\n\r\n\r\nconst inputTitles = [\"height\", \"width\", \"depth\"]\r\nconst colors = ['#f12345', '#a43c45', \"#03fc20\", \"#f003fc\", \"#fceb03\", \"#03fcf8\", \"#B7A7C7\", \"#9C9079\", \"#AAF8E7\"]\r\nconst calculateVolume = (w,h,d) => w*h*d\r\nconst calculatePrice = (v) => Math.round(v*0.15)\r\nconst checkIfColorIsHex = (hex) => {\r\n  return (/^#[0-9A-F]{6}$/i.test(hex))\r\n}\r\n\r\nconst InformationField = () => {\r\n  const [error, setError] = useState(false)\r\n  const [dimentions, setDimentions] = useContext(DimentionsContext)\r\n  const {width, height, depth} = dimentions\r\n  const textRef = useRef()\r\n  const volume = calculateVolume(width, height, depth)\r\n  const price = calculatePrice(volume)\r\n\r\n  const handleColorChange = (e) => {\r\n    const newColor = e.target.style.backgroundColor\r\n    setDimentions({...dimentions, color : newColor})\r\n  }\r\n  const handleColorInput = (e) => {\r\n    const hexValue = (textRef.current.value)\r\n    if (checkIfColorIsHex(hexValue)) {\r\n      setError(false)\r\n      setDimentions({...dimentions, color : hexValue})\r\n    } else {\r\n      setError(true)\r\n    }\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"data-container\">\r\n      <div className=\"input-container\">\r\n        {inputTitles.map((element) => {\r\n          return (<InputSlider key={element} title={element}/>)\r\n        })}\r\n        <Typography variant=\"subtitle1\">Your current dimentions (w. x h. x d.): {width}m x {height}m x {depth}m</Typography>\r\n      </div>\r\n\r\n      <div className=\"info-container\">\r\n        <div className=\"color-container\">\r\n          <Typography variant=\"subtitle1\" align=\"center\">Select one of avaiable colors</Typography>\r\n          <div className=\"center\">\r\n          {colors.map(color => {\r\n            return <div className=\"color-previev\" key={color} style={{backgroundColor: color}} onClick={handleColorChange}/>\r\n          })}\r\n          </div>\r\n          <div className=\"center\">\r\n            <Typography variant=\"subtitle1\" align=\"center\">Or type your hex color</Typography>\r\n          </div>\r\n          <div className=\"center\">\r\n            <TextField\r\n            inputRef={textRef}\r\n            label=\"HEX color\"\r\n            placeholder=\"#ffffff\"\r\n            align=\"center\"\r\n            error = {error? true : false}\r\n            helperText= {error? \"Enter valid hex value\" : null}\r\n            />\r\n            <Button variant=\"outlined\" color=\"primary\" onClick={handleColorInput}>Submit</Button>\r\n          </div>\r\n        </div>\r\n\r\n  \r\n        <Typography variant=\"h4\" align=\"center\">Price: {price}$ </Typography>\r\n        <Button variant=\"contained\" color=\"primary\" fullWidth=\"true\">ADD TO CART</Button>\r\n\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InformationField","import React from 'react';\r\n\r\nconst Cube = (props) => {\r\n  const {width, height, depth, color} = props.dimentions\r\n\r\n  return (\r\n  <mesh \r\n  {...props}\r\n  // scale={[width, height, depth]}\r\n  >\r\n    <boxBufferGeometry  attach=\"geometry\" args={[width, height, depth]}/>\r\n    <meshStandardMaterial attach=\"material\" color={color} transparent />\r\n  </mesh>\r\n  )\r\n}\r\n\r\nexport default Cube\r\n\r\n\r\n","import React, {useContext} from 'react'\nimport InformationField from './components/InformationField'\nimport Cube from './components/Cube';\nimport { Canvas } from 'react-three-fiber';\nimport {DimentionsContext} from './DimentionsContext'\nimport './styles.css'\nimport {OrbitControls} from \"drei\"\n\n\n\nfunction App() { \n  // eslint-disable-next-line\n  const [dimentions, setDimentions] = useContext(DimentionsContext)\n\n  return (\n    <div className=\"App\">\n      <InformationField />\n      <div className=\"canvas\">\n      <Canvas orthographic camera={{ zoom: 8, position: [50, 50, 300] }}>\n        <ambientLight />\n        <pointLight position={[100, 200, 1000]} />\n        <spotLight angle={0.4} intensity={0.2}/>\n        <OrbitControls />\n          <Cube position={[0, 0, 0]} dimentions={dimentions}/>\n      </Canvas>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {DimentionsProvider} from './DimentionsContext'\n\nReactDOM.render(\n  (<DimentionsProvider>\n    <App />\n  </DimentionsProvider>),\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}